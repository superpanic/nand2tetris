// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

	IN  	inM[16],         // M value input  (M = contents of RAM[A])
		instruction[16], // Instruction for execution
		reset;           // Signals whether to re-start the current
                                 // program (reset==1) or continue executing
                                 // the current program (reset==0).

	OUT 	outM[16],        // M value output
		writeM,          // Write to M? 
		addressM[15],    // Address in data memory (of M)
		pc[15];          // address of next instruction

	PARTS:

		// instruction:
		
		// ixxaccccccdddjjj
		// select ALU output or A-instruction, use op-codd 15
		// If it's an A-instruction, this  consists of 1 op-code bit and a 15-bit value
		// 0 = A-instruction
		// 1 = C-instruction / ALU output
		Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=aRegInput);
		
		


		// DESTINATION CONTROL:

		// see video 4.4 at 06:30 about destination bits


		// A register:

		// load A-Register on two conditions,
		// 1. if it's an A-Instruction – instruction[15] = 0
		// 2. if it's a C-Instruction and destination bit 5 is set to 1
		And(a=instruction[15], b=instruction[5], out=destA);
		Not(in=instruction[15], out=isAInstr);
		Or(a=destA, b=isAInstr, out=loadARegister);
		ARegister(in=aRegInput, load=loadARegister, out=aRegOutput, out[0..14]=addressM);


		// D register:
		
		// bit 4
		// "whenever there is a C-instruction 
		// and d2 (bit 4) is a 1 the D register is loaded"
		And(a=instruction[4], b=instruction[15], out=loadDRegisterFlag);
		DRegister(in=ALUoutput, load=loadDRegisterFlag, out=ALUxInput);


		// writeM:

		// write to RAM[A]
		// if a C-instruction (bit 15)
		// and if bit 3 is set
		And(a=instruction[3], b=instruction[15], out=writeM);





		// JUMP LOGIC:

		// zrOut, true if result is zero
		// ngOut, true if result is negative

		// JGT
		Or(a=instruction[2], b=instruction[1], out=ORInst21);
		Not(in=ORInst21, out=NORInst21);
		And(a=NORInst21, b=instruction[0], out=JGTtemp);
		Or(a=zrOut, b=ngOut, out=ORzrng);
		Not(in=ORzrng, out=NORzrng);
		And(a=JGTtemp, b=NORzrng, out=JGT);

		// JEQ, Jump if Equal to 0
		Or(a=instruction[2], b=instruction[0], out=ORInst20);
		Not(in=ORInst20, out=NORInst20);
		And(a=NORInst20, b=instruction[1], out=JEQtemp);
		And(a=JEQtemp, b=zrOut, out=JEQ);

		// JGE
		And(a=instruction[1], b=instruction[0], out=ANDInst10);
		Not(in=instruction[2], out=NOTInst2);
		And(a=ANDInst10, b=NOTInst2, out=JGEtemp);
		Not(in=ngOut, out=NOTng);
		And(a=JGEtemp, b=NOTng, out=JGE);

		// JLT
		Or(a=instruction[1], b=instruction[0], out=ORInst10);
		Not(in=ORInst10, out=NORInst10);
		And(a=NORInst10, b=instruction[2], out=JLTtemp);
		And(a=JLTtemp, b=ngOut, out=JLT);

		// JNE
		And(a=instruction[2], b=instruction[0], out=ANDInst20);
		Not(in=instruction[1], out=NOTInst1);
		And(a=ANDInst20, b=NOTInst1, out=JNEtemp);
		Not(in=zrOut, out=NOTzr);
		And(a=JNEtemp, b=NOTzr, out=JNE);

		// JLE, jump if less than or equal to 0
		And(a=instruction[2], b=instruction[1], out=ANDInst21);
		Not(in=instruction[0], out=NOTInst0);
		And(a=ANDInst21, b=NOTInst0, out=JLEtemp);
		Xor(a=zrOut, b=ngOut, out=XORZrNg);
		And(a=JLEtemp, b=XORZrNg, out=JLE);

		// JMP, if 1 then jump!
		//And(a=instruction[1], b=instruction[0], out=ANDInst10);
		And(a=ANDInst10, b=instruction[2], out=JMP);

		// check for any jump condition:		
		Or8Way(
			in[0]=false, // check for C-instruction here instead of later?
			in[1]=JGT,
			in[2]=JEQ,
			in[3]=JGE,
			in[4]=JLT,
			in[5]=JNE,
			in[6]=JLE,
			in[7]=JMP, 
			out=jumpFlag
		);

		// also we need to check if this is a C-instruction
		And(a=jumpFlag, b=instruction[15], out=jumpOk);



		// PC:

		// if jumpFlag is true – load address, otherwise increment ++
		PC(in=aRegOutput, load=jumpOk, inc=true, reset=reset, out[0..14]=pc);




		// ALU:

		// Mux A-register or M input, if C-instruction [15] use control bit 12 (a)
		// aRegOutput if a = 1
		And(a=instruction[12], b=instruction[15], out=selectAOrM);
		Mux16(a=aRegOutput, b=inM, sel=selectAOrM, out=ALUyInput);
		//Mux16(a=aRegOutput, b=inM, sel=instruction[12], out=ALUyInput);

		// the ALU needs 6 controlbits [6..11] as input
		ALU( x=ALUxInput, y=ALUyInput, 
			zx=instruction[11], 
			nx=instruction[10], 
			zy=instruction[9], 
			ny=instruction[8], 
			f =instruction[7], 
			no=instruction[6], 
			out=ALUoutput, out=outM,
			zr=zrOut, ng=ngOut);


}
